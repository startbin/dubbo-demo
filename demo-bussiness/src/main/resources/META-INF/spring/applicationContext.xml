<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cache="http://www.springframework.org/schema/cache" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"

	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/cache  http://www.springframework.org/schema/cache/spring-cache.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	default-lazy-init="true">

	<!-- 扫包 包含Service 注解 ,排除其他注解 -->
	<context:component-scan base-package="com.dongao">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" />
		<context:exclude-filter type="aspectj" expression="com.dongao.framework.web.filter.*" />
		<context:exclude-filter type="aspectj" expression="com.dongao.framework.web.component.*.service..*ServiceImpl" />
		<context:exclude-filter type="aspectj" expression="com.dongao.framework.core.mongo.*" />
	</context:component-scan>
	<!-- <context:property-placeholder location="classpath:resources.properties" /> -->
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:dubbo.properties</value>
				<value>classpath:resources.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true"/>
	</bean>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="resultSetLogEnabled" value="true" />
		<property name="statementLogEnabled" value="false" />
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="statementExecuteAfterLogEnabled" value="true" />
		<property name="statementExecuteBatchAfterLogEnabled" value="true" />
		<property name="statementExecuteQueryAfterLogEnabled" value="true" />
		<property name="statementExecuteUpdateAfterLogEnabled" value="true" />
		<property name="statementParameterClearLogEnable" value="false" />
		<property name="statementParameterSetLogEnabled" value="false" />
		<property name="dataSourceLogEnabled" value="false" />

		<property name="connectionCloseAfterLogEnabled" value="false" />
		<property name="connectionCommitAfterLogEnabled" value="false" />
		<property name="connectionConnectAfterLogEnabled" value="false" />
		<property name="connectionConnectBeforeLogEnabled" value="false" />
		<property name="connectionLogEnabled" value="false" />
		<property name="connectionRollbackAfterLogEnabled" value="false" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<property name="filters" value="stat" />

		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
			</list>
		</property>
		<property name="connectionProperties" value="druid.stat.mergeSql=true" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>
		</property>
		<!-- 根据实际工程路径 修改 typeAliasesPackage -->
		<property name="typeAliasesPackage" value="com.dongao.data.demo.bussiness.po" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
							supportMethodsArguments=true
							returnPageInfo=check
							params=count=countSql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="addToConfig" value="true" />
		<property name="basePackage" value="com.dongao.data.demo.bussiness.mapper" />
	</bean>

	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 根据实际工程路径 修改 basePackage -->
		<property name="basePackage" value="com.dongao.data.demo.bussiness.mapper" />
		<property name="markerInterface" value="tk.mybatis.mapper.common.Mapper" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<aop:aspectj-autoproxy />

	<aop:config>
		<!-- 根据实际工程路径 修改 execution -->
		<aop:pointcut id="appService" expression="execution(* com.dongao..service..*Service*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="appService" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- <import resource="META-INF/spring/dubbo.xml" /> -->
</beans>